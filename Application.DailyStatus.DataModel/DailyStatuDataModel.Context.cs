//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Application.DailyStatus.DataAccessEntities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DatabaseConnection : DbContext
    {
        public DatabaseConnection()
            : base("name=DatabaseConnection")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Activity> Activities { get; set; }
        public virtual DbSet<AuditDetail> AuditDetails { get; set; }
        public virtual DbSet<DailyWorkStatu> DailyWorkStatus { get; set; }
        public virtual DbSet<RoleActivity> RoleActivities { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TimeZone> TimeZones { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserDateWiseStatu> UserDateWiseStatus { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
    
        public virtual ObjectResult<GetAllRoles_Result> GetAllRoles(Nullable<int> startRecord, Nullable<int> pageSize, string sortColumn, string sortOrder, string searchText, Nullable<bool> status)
        {
            var startRecordParameter = startRecord.HasValue ?
                new ObjectParameter("StartRecord", startRecord) :
                new ObjectParameter("StartRecord", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllRoles_Result>("GetAllRoles", startRecordParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter, searchTextParameter, statusParameter);
        }
    }
}
